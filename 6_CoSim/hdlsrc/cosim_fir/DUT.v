// -------------------------------------------------------------
// 
// File Name: hdlsrc\cosim_fir\DUT.v
// Created: 2015-03-16 17:10:04
// 
// Generated by MATLAB 8.5 and HDL Coder 3.6
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.001
// Target subsystem base rate: 0.001
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.001
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out1                          ce_out        0.001
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: DUT
// Source Path: cosim_fir/DUT
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module DUT
          (
           clk,
           reset,
           clk_enable,
           In1,
           ce_out,
           Out1
          );


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [15:0] In1;  // sfix16_En14
  output  ce_out;
  output  signed [18:0] Out1;  // sfix19_En14


  wire enb;
  reg signed [15:0] Delay_out1;  // sfix16_En14
  reg signed [15:0] Delay1_out1;  // sfix16_En14
  reg signed [15:0] Delay2_out1;  // sfix16_En14
  reg signed [15:0] Delay3_out1;  // sfix16_En14
  reg signed [15:0] Delay4_out1;  // sfix16_En14
  wire signed [31:0] Gain_mul_temp;  // sfix32_En34
  wire signed [15:0] Gain_out1;  // sfix16_En14
  wire signed [31:0] Gain1_mul_temp;  // sfix32_En31
  wire signed [15:0] Gain1_out1;  // sfix16_En14
  wire signed [31:0] Gain2_cast;  // sfix32_En29
  wire signed [15:0] Gain2_out1;  // sfix16_En14
  wire signed [31:0] Gain3_mul_temp;  // sfix32_En31
  wire signed [15:0] Gain3_out1;  // sfix16_En14
  wire signed [31:0] Gain4_mul_temp;  // sfix32_En34
  wire signed [15:0] Gain4_out1;  // sfix16_En14
  wire signed [15:0] Mux_out1 [0:4];  // sfix16_En14 [5]
  wire signed [18:0] Sum_of_Elements_add_cast;  // sfix19_En14
  wire signed [18:0] Sum_of_Elements_add_cast_1;  // sfix19_En14
  wire signed [18:0] Sum_of_Elements_add_temp;  // sfix19_En14
  wire signed [18:0] Sum_of_Elements_add_cast_2;  // sfix19_En14
  wire signed [18:0] Sum_of_Elements_add_temp_1;  // sfix19_En14
  wire signed [18:0] Sum_of_Elements_add_cast_3;  // sfix19_En14
  wire signed [18:0] Sum_of_Elements_add_temp_2;  // sfix19_En14
  wire signed [18:0] Sum_of_Elements_add_cast_4;  // sfix19_En14
  wire signed [18:0] Sum_of_Elements_out1;  // sfix19_En14
  reg signed [18:0] Delay5_out1;  // sfix19_En14


  assign enb = clk_enable;

  // <S2>/Delay
  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1 <= In1;
        end
      end
    end


  // <S2>/Delay1
  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Delay_out1;
        end
      end
    end


  // <S2>/Delay2
  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Delay1_out1;
        end
      end
    end


  // <S2>/Delay3
  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Delay2_out1;
        end
      end
    end


  // <S2>/Delay4
  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Delay3_out1;
        end
      end
    end


  // <S2>/Gain
  assign Gain_mul_temp = 16'sb0101000111101100 * Delay4_out1;
  assign Gain_out1 = {{4{Gain_mul_temp[31]}}, Gain_mul_temp[31:20]};



  // <S2>/Gain1
  assign Gain1_mul_temp = 16'sb0110011001100110 * Delay3_out1;
  assign Gain1_out1 = {Gain1_mul_temp[31], Gain1_mul_temp[31:17]};



  // <S2>/Gain2
  assign Gain2_cast = {{2{Delay2_out1[15]}}, {Delay2_out1, 14'b00000000000000}};
  assign Gain2_out1 = Gain2_cast[30:15];



  // <S2>/Gain3
  assign Gain3_mul_temp = 16'sb0110011001100110 * Delay1_out1;
  assign Gain3_out1 = {Gain3_mul_temp[31], Gain3_mul_temp[31:17]};



  // <S2>/Gain4
  assign Gain4_mul_temp = 16'sb0101000111101100 * Delay_out1;
  assign Gain4_out1 = {{4{Gain4_mul_temp[31]}}, Gain4_mul_temp[31:20]};



  // <S2>/Mux
  assign Mux_out1[0] = Gain_out1;
  assign Mux_out1[1] = Gain1_out1;
  assign Mux_out1[2] = Gain2_out1;
  assign Mux_out1[3] = Gain3_out1;
  assign Mux_out1[4] = Gain4_out1;

  // <S2>/Sum of Elements
  assign Sum_of_Elements_add_cast = {{3{Mux_out1[0][15]}}, Mux_out1[0]};
  assign Sum_of_Elements_add_cast_1 = {{3{Mux_out1[1][15]}}, Mux_out1[1]};
  assign Sum_of_Elements_add_temp = Sum_of_Elements_add_cast + Sum_of_Elements_add_cast_1;
  assign Sum_of_Elements_add_cast_2 = {{3{Mux_out1[2][15]}}, Mux_out1[2]};
  assign Sum_of_Elements_add_temp_1 = Sum_of_Elements_add_temp + Sum_of_Elements_add_cast_2;
  assign Sum_of_Elements_add_cast_3 = {{3{Mux_out1[3][15]}}, Mux_out1[3]};
  assign Sum_of_Elements_add_temp_2 = Sum_of_Elements_add_temp_1 + Sum_of_Elements_add_cast_3;
  assign Sum_of_Elements_add_cast_4 = {{3{Mux_out1[4][15]}}, Mux_out1[4]};
  assign Sum_of_Elements_out1 = Sum_of_Elements_add_temp_2 + Sum_of_Elements_add_cast_4;



  // <S2>/Delay5
  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= Sum_of_Elements_out1;
        end
      end
    end


  assign Out1 = Delay5_out1;

  assign ce_out = clk_enable;

endmodule  // DUT

